/*Software Development II. Assignment 2
 *Cards Game: Elevens
 *Student: Vasile Verejan
 *Student: Jatan Patel
 *Teacher: Zeeshan Chaudhry
 */
package elevensGame;

import java.util.InputMismatchException;
import java.util.Scanner;

public class GameApp {
    public static void main(String[] args) {
        Deck Cards = new Deck(); //Creating a instance of a Deck class.
        Scanner input = new Scanner(System.in); //Declaring the Scanner object

        System.out.println("-- Hello and Welcome to our Elevens Game!!! --");
        displayStart(); //Displaying the start menu.
        int menuInput = input.nextInt(); //Getting the user input.
        switch (menuInput) {
            case 1:
                playGame(Cards);
                break;
            case 2:
                playDemo(Cards);
                break;
            case 3:
                playDemoFull(Cards);
            case 4:
                System.exit(-1);
                break;
            default:
                System.out.println("By default game will start with option 1");
                playGame(Cards);
                break;
        }
    }

    public static void replayGame(Deck Cards) {
        Scanner input = new Scanner(System.in);
        //This method will get the elements that we store during the game into our replay array
        // and print it to the screen to show the movements from the beginning to the end.
        System.out.println("\n<< Movements List >>");
        try {
            for (int i = 0; i < Cards.getReplay().getCurrentSize(); i++) {
                String s = Cards.getReplay().getElementById(i).toString();

                System.out.println("Press < 1 > to see the step taken! Press any other number to exit!");
                int replayInput = input.nextInt();


                if (replayInput == 1 && i < Cards.getReplay().getCurrentSize()) {
                    System.out.println("Movement number - " + (i + 1) + " :>" + s);

                } else {
                    System.out.println("End of list! Good Bye!..");
                    System.exit(-1);
                }
            }
        } catch (InputMismatchException ex) {
            System.out.println("Input should be a number!");
            System.out.println("Bye now!");
        }
        System.out.println("End of the list!");
    }

    public static void playDemo(Deck Cards) {
        //This method when called will simulate the game and instead of inputs
        // will get values from the list generated by the Deck.demo().
        //numberOfTries will keep track of how many movements where made.
        // And will get displayed at the end of the game.
        int numberOfTries = 0;
        Cards.generateCards();
        Cards.playerHand();
        Scanner input = new Scanner(System.in);

        try {
            while (!Cards.win()) {
                Cards.printTable();
                Integer[] ourList = Cards.demo();

                System.out.println("\n Press 1 to play next step.");

                int userInput = input.nextInt();
                if (userInput == 1) {
                    if (ourList.length < 2) {
                        System.out.println(" Out of Moves! ");
                        break;
                    } else if (ourList.length == 2) {
                        int x = Cards.demo()[0];
                        int y = Cards.demo()[1];
                        Cards.remove2(x, y);
                        numberOfTries++;
                    } else if (ourList.length == 3) {
                        int x = Cards.demo()[0];
                        int y = Cards.demo()[1];
                        int z = Cards.demo()[2];
                        Cards.removeJQK(x, y, z);
                        numberOfTries++;
                    }
                } else {
                    System.out.println("Invalid number was entered!");
                }
            }
        } catch (InputMismatchException ex) {
            System.out.println("The input can't be a letter, try again!");

        }


        if (Cards.win()) {
            System.out.println("You won!!");
            System.out.println("Number of moves made: " + numberOfTries);
        } else {
            System.out.println("Game Over Computer Bot Lost!!");
            System.out.println("Number of moves made: " + numberOfTries);
        }
    }

    public static void playDemoFull(Deck Cards) {
        //This is a bonus method will play all game without asking.

        //This method when called will simulate the game and instead of inputs
        // will get values from the list generated by the Deck.demo().
        //numberOfTries will keep track of how many movements where made.
        // And will get displayed at the end of the game.
        int numberOfTries = 0;
        Cards.generateCards();
        Cards.playerHand();
        Scanner input = new Scanner(System.in);

        while (!Cards.win()) {
            Cards.printTable();
            Integer[] ourList = Cards.demo();
            if (ourList.length < 2) {
                System.out.println(" Out of Moves! ");
                break;
            } else if (ourList.length == 2) {
                int x = Cards.demo()[0];
                int y = Cards.demo()[1];
                Cards.remove2(x, y);
                numberOfTries++;
            } else if (ourList.length == 3) {
                int x = Cards.demo()[0];
                int y = Cards.demo()[1];
                int z = Cards.demo()[2];
                Cards.removeJQK(x, y, z);
                numberOfTries++;
            }

        }
        if (Cards.win()) {
            System.out.println("You won!!");
            System.out.println("Number of moves made: " + numberOfTries);
        } else {
            System.out.println("Game Over Computer Bot Lost!!");
            System.out.println("Number of moves made: " + numberOfTries);
        }
    }

    public static void playGame(Deck Cards) {
        //This method when called will execute our game where will have to repeatably
        // input the values for indexes to be removed and also to navigate through the menu.
        int numberOfTries = 0;
        Scanner input = new Scanner(System.in);
        Cards.generateCards();
        Cards.playerHand();
        boolean flag = false;

        while (!Cards.win() && !flag) {
            Cards.printTable();
            inTextDisplay();
            switch (input.nextInt()) {
                case 1:
                    //This case will cover the part when we removing the sum 11 pair.
                    if (Cards.win()) {
                        System.out.println("You won!");
                        flag = true;
                    } else {
                        System.out.println("  -- Chose your 11 pair! --");
                        System.out.println("-Enter one number at the time!-");
                        Cards.remove2(input.nextInt(), input.nextInt());
                        numberOfTries++;
                    }
                    break;
                case 2:
                    //Case number two covers the removal of JQK combination.
                    if (Cards.win()) {
                        System.out.println("You won!");
                        flag = true;
                    } else {
                        System.out.println("Choose JQK combination!");
                        Cards.removeJQK(input.nextInt(), input.nextInt(), input.nextInt());
                        numberOfTries++;
                    }
                    break;
                case 3:
                    //If there will be no available hint loop will break and will continue to the end menu.
                    if (!Cards.giveHint()) flag = true;
                    break;
                case 4:
                    //In case user will want to break the game completely he will use the case four.
                    System.out.println(" Good Bye! ");
                    System.exit(-1);
                    break;
                default:
                    System.out.println("Wrong input! Try again!");
            }
        }
        //Checking for wining and displaying the number of moves made.
        if (Cards.win()) {
            System.out.println("You won!!");
            System.out.println("Number of moves made : " + numberOfTries);
        } else {
            System.out.println("Number of moves made: " + numberOfTries);
        }

        //The end menu starts here where based on the user input the necessary methods, classes will be called.
        displayEnd();
        int endInput = input.nextInt();
        if (endInput == 1) {
            replayGame(Cards);
            Cards.getReplay().clear();
        } else if (endInput == 2) {
            playGame(new Deck());
        } else {
            System.out.println("Other options not allow here!");
            System.out.println("Bye Bye!!");
            System.exit(-1);
        }

    }

    public static void inTextDisplay() {
        //Inside the game menu
        System.out.println("\n1. To remove a combo of 11 points.");
        System.out.println("2. To remove a combo of J-Q-K.");
        System.out.println("3. Get Hint ");
        System.out.println("4. Exit Prematurely.");
    }

    public static void displayStart() {
        //Start menu
        System.out.println("Please pick one of the options!(1-3)");
        System.out.println("1. New Game");
        System.out.println("2. Play Demo");
        System.out.println("3. Full Demo Game");
        System.out.println("4. Exit");
    }

    public static void displayEnd() {
        //End menu
        System.out.println("\n-- What would you like to do next?--");
        System.out.println("1. Replay my movements");
        System.out.println("2. Play Again");
        System.out.println("3. Exit");
    }

}






